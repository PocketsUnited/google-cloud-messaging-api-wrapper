/* * Copyright (c) 2012 Pockets United GmbH * *    Licensed under the Apache License, Version 2.0 (the "License"); *    you may not use this file except in compliance with the License. *    You may obtain a copy of the License at * *        http://www.apache.org/licenses/LICENSE-2.0 * *    Unless required by applicable law or agreed to in writing, software *    distributed under the License is distributed on an "AS IS" BASIS, *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *    See the License for the specific language governing permissions and *    limitations under the License. */package com.pocketsunited.gcm.data;import com.fasterxml.jackson.annotation.JsonProperty;import java.util.Collections;import java.util.List;/** * * * @author Michael Duergner <michael@pocketsunited.com> */public class Response extends AbstractJsonBase {    /**     *     *     * @author Michael Duergner <michael@pocketsunited.com>     */    public static class Result extends AbstractJsonBase {        /**         *         *         * @author Michael Duergner <michael@pocketsunited.com>         */        public static enum ErrorCode {            MissingRegistration,InvalidRegistration,MismatchSenderId,NotRegistered,MessageTooBig,InvalidDataKey,InvalidTtl,Unavailable,InternalServerError,InvalidPackageName;        }        @JsonProperty(                value = "message_id")        private String messageId;        @JsonProperty(                value = "registration_id")        private String registrationId;        @JsonProperty(                value = "error")        private ErrorCode error;        public String getMessageId() {            return messageId;        }        public String getRegistrationId() {            return registrationId;        }        public ErrorCode getError() {            return error;        }        public boolean isFailure() {            return null == messageId;        }        public boolean isCanonicalId() {            return null != messageId && null != registrationId;        }        public boolean isSuccess() {            return null != messageId && null == registrationId;        }    }    @JsonProperty(            value = "multicast_id")    private long multicastId;    @JsonProperty(            value = "success")    private short success;    @JsonProperty(            value = "failure")    private short failure;    @JsonProperty(            value = "canonical_ids")    private short canonicalIds;    @JsonProperty(            value = "results")    private List<Result> results;    public long getMulticastId() {        return multicastId;    }    public short getSuccess() {        return success;    }    public short getFailure() {        return failure;    }    public short getCanonicalIds() {        return canonicalIds;    }    public List<Result> getResults() {        return Collections.unmodifiableList(results);    }}