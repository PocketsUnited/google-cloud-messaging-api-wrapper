/*Copyright 2013-2014 SpruceHill.io GmbHLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/package io.sprucehill.gcm.data;import com.fasterxml.jackson.annotation.JsonProperty;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * Class encapsulating a request to the Google Cloud Messaging server; It can be created using {@link Builder}. * * You should never need to use any getter method with the class or interact in another way as to build it and supply * it to the {@link io.sprucehill.gcm.service.IGoogleCloudMessagingService} for execution. * * @author Michael Duergner <michael@sprucehill.io> */public class Request extends AbstractJsonBase {    @JsonProperty(            value = "registration_ids")    protected List<String> registrationIds = new ArrayList<String>();    @JsonProperty(            value = "collapse_key")    protected String collapseKey;    @JsonProperty(            value = "data")    protected Map<String,String> data = new HashMap<String, String>();    @JsonProperty(            value = "delay_while_idle")    protected boolean delayWhileIdle = Boolean.FALSE;    @JsonProperty(            value = "time_to_live")    protected long timeToLive = 4l * 7l * 24l * 60l * 60l; // 4 weeks    @JsonProperty(            value = "category")    protected String category;    @JsonProperty(            value = "dry_run")    protected boolean dryRun = Boolean.FALSE;    /**     * Get the registration ID at the specified <code>index</code>; this method is used internally for creating the correct     * {@link io.sprucehill.gcm.service.IGoogleCloudMessagingService.IGoogleCloudMessageCallback} upon failure or canonical     * results from Google Cloud Messaging service.     *     * @param index     * @return     */    public String getRegistrationId(int index) {        if (index < registrationIds.size()) {            return registrationIds.get(index);        }        throw new IllegalArgumentException("'index' is out of bounds!");    }    /**     * Internal builder class for {@link Request}; Use {@link Builder} to create one.     *     * @author Michael Duergner <michael@pocketsunited.com>     */    protected static abstract class Init<T extends Init<T,U>, U extends Request> extends AbstractJsonBase.Init<T,U> {        protected Init(U object) {            super(object);        }        /**         * Add a <code>recipient ID</code> to this request; this method may be called several times; it is idempotent in the         * way that it will add the same, in term of hashCode() and equals() registration ID only once.         *         * @param recipientId The registration ID to add to this request         * @return The {@link Builder} itself.         */        public T withRecipientId(String recipientId) {            if (!object.registrationIds.contains(recipientId)) {                object.registrationIds.add(recipientId);            }            return self();        }        /**         * Set a <code>collapse key</code> on this request; calling this method more than once on the same request will         * result in the last supplied collapse key to be used.         *         * @param collapseKey The collapse key to use with this request         * @return The {@link Builder} itself.         */        public T withCollapseKey(String collapseKey) {            object.collapseKey = collapseKey;            return self();        }        /**         * Add a <code>data field</code>, i.e. a key-value-pair to this request; calling this method more than once with the         * same <code>key</code> will result in the last supplied <code>value</code> to be used for this key.         *         * @param key The key to store the value at         * @param value The value to store.         * @return The {@link Builder} itself.         */        public T withDataField(String key, String value) {            object.data.put(key,value);            return self();        }        /**         * Override all <code>data fields</code> in this request with the ones from the <code>Map</code> supplied.         *         * @param data The Map containing the new data fields         * @return The {@link Builder} itself.         */        public T withData(Map<String,String> data) {            object.data = data;            return self();        }        /**         * Tell the Google Cloud Messaging service to delay delivering this request if the device is in idle state.         *         * {@link Request}s are not delayed by default, i.e. you must call this method if you want to delay the request.         *         * @return The {@link Builder} itself.         */        public T withDelayWhileIdle() {            object.delayWhileIdle = true;            return self();        }        /**         * Tell the Google Cloud Messaging service to not delay delivering this request if the device is in idle state.         *         * As {@link Request}s are delayed by default this method may be used to indicate this default behavior in your         * code or to disable delaying once you enabled it via {@link #withDelayWhileIdle()}.         *         * @return The {@link Builder} itself.         */        public T withoutDelayWhileIdle() {            object.delayWhileIdle = false;            return self();        }        /**         * Set a specific <code>time to live</code> on this {@link Request}; {@link Request}s have a default time to live         * of 4 weeks         *         * @param timeToLive The time to live to set         * @return The {@link Builder} itself.         */        public T withTimeToLive(long timeToLive) {            object.timeToLive = timeToLive;            return self();        }        /**         * Set a <code>category</code> on this request.         *         * @param category The category to set.         * @return The {@link Builder} itself.         */        public T withCategory(String category) {            object.category = category;            return self();        }        /**         * Tell the Google Could Messaging service to act in <code>dry run</code> mode, i.e. do not deliver this request         * to devices.         *         * {@link Request}s act <b>NOT</b> in dry run mode by default.         *         * @return The {@link Builder} itself.         */        public T withDryRun() {            object.dryRun = true;            return self();        }        /**         * Use this method to disable <code>dry run</code> mode again on this request once it has been enabled trough         * {@link #withDryRun()}.         *         * @return The {@link Builder} itself.         */        public T withoutDryRun() {            object.dryRun = false;            return self();        }    }    /**     * The actual Builder for {@link Request} objects. Create an instance of this class for creating {@link Request} objects     * that can be sent to {@link io.sprucehill.gcm.service.IGoogleCloudMessagingService}.     *     * Refer to the Google Cloud Messaging service documentation if you need more information on the semantics of specific     * fields in the {@link Request} class.     *     * @author Michael Duergner <michael@pocketsunited.com>     */    public static class Builder extends Init<Builder,Request> {        public Builder() {            super(new Request());        }        @Override        protected Builder self() {            return this;        }    }}