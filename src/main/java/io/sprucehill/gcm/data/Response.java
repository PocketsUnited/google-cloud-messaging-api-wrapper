/*Copyright 2013-2014 SpruceHill.io GmbHLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/package io.sprucehill.gcm.data;import com.fasterxml.jackson.annotation.JsonProperty;import java.util.Collections;import java.util.List;/** * A Java Wrapper for the response received from Google Cloud Messaging service when sending a {@link Request}. * * @author Michael Duergner <michael@sprucehill.io> */public class Response extends AbstractJsonBase {    /**     * The result for a specific <code>registration ID</code> supplied with a {@link Request}     *     * @author Michael Duergner <michael@pocketsunited.com>     */    public static class Result extends AbstractJsonBase {        /**         * A Java enum with the <code>error codes</code> available from the Google Cloud Messaging service.         *         * Refer to the Google Cloud Messaging service documentation for futher information of the semantics.         *         * @author Michael Duergner <michael@pocketsunited.com>         */        public static enum ErrorCode {            MissingRegistration,            InvalidRegistration,            MismatchSenderId,            NotRegistered,            MessageTooBig,            InvalidDataKey,            InvalidTtl,            Unavailable,            InternalServerError,            InvalidPackageName;        }        @JsonProperty(                value = "message_id")        protected String messageId;        @JsonProperty(                value = "registration_id")        protected String registrationId;        @JsonProperty(                value = "error")        protected ErrorCode error;        /**         * Get the <code>message ID</code> the Google Cloud Messaging service assigned to this specific push.         *         * This method may only be called if {@link #isSuccess()} return <code>TRUE</code>.         *         * @return The <code>messaging ID</code> if {@link #isSuccess()} returns <code>TRUE</code>, <code>NULL</code> otherwise         */        public String getMessageId() {            return messageId;        }        /**         * Get the <code>registration ID</code> for this specific {@link Result}. You may use this to either replace it with         * the supplied <code>canonical ID</code> in case {@link #isCanonicalId()} is <code>TRUE</code> or to extended error handling         * with respect to the {@link ErrorCode} if {@link #isFailure()} is <code>TRUE</code>.         *         * @return The <code>registration ID</code> for this {@link Result}         */        public String getRegistrationId() {            return registrationId;        }        /**         * Use this method to retrieve the {@link ErrorCode} if {@link #isFailure()} returns <code>TRUE</code>.         *         * @return The {@link ErrorCode} if {@link #isFailure()} is <code>TRUE</code>, <code>NULL</code> otherwise.         */        public ErrorCode getError() {            return error;        }        /**         * Use this method to determine if the Google Cloud Messaging service encountered an error while sending the {@link Request}         * to the device with this specific <code>registration ID</code>.         *         * @return <code>TRUE</code> if and only if there was an error while sending the {@link Request} to the device with         * this specific <code>registration ID</code>.         */        public boolean isFailure() {            return null == messageId;        }        /**         * Use this method to determine if the Google Cloud Messaging service has a <code>canonical ID</code> for this specific <code>registration ID</code>.         *         * This method may only be <code>TRUE</code> if both {@link #isSuccess()} and {@link #isFailure()} are <code>FALSE</code>         *         * @return <code>TRUE</code> if and only if there is a <code>canonical ID</code> available for this <code>registration ID</code>;         * <code>FALSE</code> otherwise         */        public boolean isCanonicalId() {            return null != messageId && null != registrationId;        }        /**         * Use this method to determine if the Google Cloud Messaging service could push the {@link Request} to this         * specific device, i.e. registration ID.         *         * This method will return <code>TRUE</code> if and only if the push was possible and there is no <code>canonical ID</code>         * for this registration ID.         *         * @return <code>TRUE</code> if the push to this device was successful, <code>FALSE</code> if there was either an         * error pushing or a canonical ID is available for this registration ID; in case this method returns <code>FALSE</code>         * you should check whether {@link #isCanonicalId()} is <code>TRUE</code> or <code>FALSE</code>.         */        public boolean isSuccess() {            return null != messageId && null == registrationId;        }    }    @JsonProperty(            value = "multicast_id")    protected long multicastId;    @JsonProperty(            value = "success")    protected short success;    @JsonProperty(            value = "failure")    protected short failure;    @JsonProperty(            value = "canonical_ids")    protected short canonicalIds;    @JsonProperty(            value = "results")    protected List<Result> results;    public long getMulticastId() {        return multicastId;    }    public short getSuccess() {        return success;    }    public short getFailure() {        return failure;    }    public short getCanonicalIds() {        return canonicalIds;    }    public List<Result> getResults() {        return Collections.unmodifiableList(results);    }}