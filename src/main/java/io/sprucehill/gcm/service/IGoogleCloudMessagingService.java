/*Copyright 2013-2014 SpruceHill.io GmbHLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/package io.sprucehill.gcm.service;import io.sprucehill.gcm.data.Request;import io.sprucehill.gcm.data.Response;import java.util.Map;/** * * * @author Michael Duergner <michael@sprucehill.io> */public interface IGoogleCloudMessagingService {    /**     * A callback interface you must implement to handle the various different results from Google Cloud Messaging service     * upon sending a {@link Request}.     *     * For each single {@link Request} you send through {@link #send(io.sprucehill.gcm.data.Request, io.sprucehill.gcm.service.IGoogleCloudMessagingService.IGoogleCloudMessageCallback)} you     * will receive a call to one and only one of the methods from this interface.     *     * @author Michael Duergner <michael@pocketsunited.com>     */    interface IGoogleCloudMessageCallback {        /**         * Java enum wrapper for the different failure codes from Google Cloud Messaging service.         *         * Refer to the Google Cloud Messaging service documentation for the semantics of the different values.         *         * @author Michael Duergner <michael@pocketsunited.com>         */        enum FailureCode {            BAD_REQUEST,UNAUTHORIZED,SERVICE_UNAVAILABLE,INTERNAL_ERROR,UNKNOWN_ERROR;            private FailureCode() {}            private Throwable throwable;            public boolean hasCause() {                return null != throwable;            }            public Throwable getCause() {                return throwable;            }            public FailureCode withCause(Throwable throwable) {                this.throwable = throwable;                return this;            }        }        /**         * This method will be called when all pushes have been processed successfully.         *         * No further action from your side is necessary with regard to Google Cloud Messaging service.         *         */        void successful();        /**         * This method will be called if and only if the {@link Request} as such failed and not a single push could be         * delivered to any of your supplied <code>registration IDs</code>.         *         * You may handle this with respect to the {@link FailureCode} supplied         *         * @param failureCode The {@link FailureCode} indicating the problem with the {@link Request}.         */        void failure(FailureCode failureCode);        /**         * This method will be called if and only if the push to one or more, but not all, <code>registration IDs</code> within         * the supplied {@link Request} failed but no <code>canonical ID</code> are returned.         *         * In case an <code>canonical ID</code> was returned for one or more <code>registration IDs</code> {@link #failuresAndCanonicals(java.util.Map, java.util.Map)}         * will be called!         *         * You may handle those <code>registration IDs</code> with respect to their specific {@link io.sprucehill.gcm.data.Response.Result.ErrorCode}s.         *         * @param failures A Map with <code>registration ID</code> to their specific {@link io.sprucehill.gcm.data.Response.Result.ErrorCode}         */        void failures(Map<String,Response.Result.ErrorCode> failures);        /**         * This method will be called if and only if the Google Cloud Messaging service returned <code>canonical IDs</code> for one         * or more, up to all, <code>registration IDs</code> supplied with the {@link Request} but no errors have been encountered.         *         * In case an additional error was encountered for one or more <code>registration IDs</code> {@link #failuresAndCanonicals(java.util.Map, java.util.Map)}         * will be called!         *         * @param canonicals A Map with <code>registration ID</code> to the <code>canonical ID</code>         */        void canonicals(Map<String,String> canonicals);        /**         * This method will be called if and only if errors as well as canonical results are returned from Google Cloud         * Messaging service for a single {@link Request}.         *         * @param failures A Map with <code>registration ID</code> to their specific {@link io.sprucehill.gcm.data.Response.Result.ErrorCode}         * @param canonicals A Map with <code>registration ID</code> to the <code>canonical ID</code>         */        void failuresAndCanonicals(Map<String,Response.Result.ErrorCode> failures,Map<String,String> canonicals);    }    /**     * This will send send the {@link Request} to the Google Cloud Messaging service. Implementations <code>MUST</code> take care     * of the cases when exponential back-off should be implemented.     *     * {@link GoogleCloudMessagingService} supplies an implementation of this interface which will handle exponential back-off.     *     * @param requestBody The {@link Request} to send     * @param callback The {@link IGoogleCloudMessageCallback} to use for informing about the result     */    void send(Request requestBody, IGoogleCloudMessageCallback callback);}